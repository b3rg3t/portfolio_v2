{"version":3,"sources":["components/Header/index.js","components/Navigation/index.js","components/Footer/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Head","react_default","a","createElement","className","Navigation","_ref","links","map","link","key","to","href","label","Footer","LINKS","App","components_Navigation","Header","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAceA,eAXF,kBACXC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cACGH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,0DCSUC,SAdI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACjBN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UACKI,EAAMC,IAAI,SAAAC,GAAI,OACXR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,EAAKE,IACVV,EAAAC,EAAAC,cAAA,KAAGS,KAAMH,EAAKE,IAAKF,EAAKI,eCK7BC,SAXA,kBACbb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,aACa,IACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOQ,KAAK,gCAAzB,eCAAG,EAAQ,CACZ,CAAEF,MAAO,UAAWF,GAAI,+BACxB,CAAEE,MAAO,UAAWF,GAAI,iCAeXK,mLAVX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,CAAYV,MAAOQ,IACnBd,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cANUC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.47193650.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Header/header.scss'\r\n\r\nconst Head = () => (\r\n  <header>\r\n    <div className=\"skewed-bg\">\r\n\t<div className=\"content\">\r\n\t\t<h1 className=\"title\">David Berg</h1>\r\n     <p className=\"text\">This is the page of a coming Front end Developer.</p>\r\n\t</div>\r\n</div>\r\n  </header>\r\n);\r\n\r\nexport default Head;\r\n","import React from 'react';\r\nimport \"../Navigation/navigation.scss\";\r\n\r\nconst Navigation = ({ links }) => (\r\n  <nav>\r\n    <div className=\"Navigation\">\r\n        <ul>\r\n            {links.map(link => (\r\n                <li key={link.to}>\r\n                    <a href={link.to}>{link.label}</a>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport \"../Footer/footer.scss\";\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <p className=\"credits\">\r\n      Website by{\" \"}\r\n      <a className=\"link\" href=\"https://twitter.com/pipozoft\">\r\n        @b3rg3t\r\n      </a>\r\n    </p>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\n// import logo from '.../';\nimport \"./App.scss\";\nimport Head from \"../Header/index\";\nimport Navigation from \"../Navigation/index\";\nimport Footer from \"../Footer/index\";\n\nconst LINKS = [\n  { label: 'Website', to: 'https://www.davidanders.se/' },\n  { label: 'Twitter', to: 'https://twitter.com/rwieruch' },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation links={LINKS} />\n        <Head />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from '../src/components/App';\nimport * as serviceWorker from '../src/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}